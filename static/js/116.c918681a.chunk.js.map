{"version":3,"file":"static/js/116.c918681a.chunk.js","mappings":"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","sources":["components/CommonStyles/CommonStyles.jsx","redux/filter/selectors.js","redux/contacts/selectors.js","components/Section/Section.styled.jsx","components/Section/Section.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FormContainer = styled.div`\n  width: 320px;\n`;\n\nexport const Form = styled.form`\n  width: 320px;\n`;\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 16px;\n`;\n","export const selectFilter = state => state.filter;\n","import { selectFilter } from 'redux/filter/selectors';\n\nexport const selectLoading = state => state.contacts.loading;\n\nexport const selectAllContacts = state => state.contacts.items;\n\nexport const selectVisibleContacts = state => {\n  const contacts = selectAllContacts(state);\n  const filter = selectFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n  return contacts?.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter)\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Part = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n\n  :not(:last-child) {\n    margin-bottom: 32px;\n  }\n`;\n\nexport const Title = styled.h2`\n  font-weight: bold;\n`;\n","import PropTypes from 'prop-types';\nimport { Part, Title } from './Section.styled';\n\nconst Section = ({ title, children }) => (\n  <Part>\n    <Title>{title}</Title>\n    {children}\n  </Part>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","import React from 'react';\nimport { addContact } from 'redux/contacts/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport { Input, Button } from '@chakra-ui/react';\nimport { Form, Label } from '../CommonStyles/CommonStyles';\n\nconst ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectAllContacts);\n\n  // const initialValues = { name: '', number: '' };\n  const handleAddContact = async (values, { resetForm }) => {\n    const { name, number } = values;\n    const isDuplicateName = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    const isDuplicateNumber = contacts.find(\n      contact => contact.number.toLowerCase() === number.toLowerCase()\n    );\n\n    if (isDuplicateName) {\n      return alert(`${name} is already in contacts.`);\n    }\n\n    if (isDuplicateNumber) {\n      return alert(`${number} is already in contacts.`);\n    }\n\n    console.log(`Name is ${name} and number number is ${number}`);\n    await dispatch(addContact({ name, number }));\n    resetForm();\n  };\n\n  return (\n    <>\n      <Form onSubmit={handleAddContact} autoComplete=\"off\">\n        <Label>\n          Name\n          <Input\n            variant=\"outline\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </Label>\n        <Label>\n          Number\n          <Input\n            variant=\"outline\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Number number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </Label>\n        <Button type=\"submit\" colorScheme=\"teal\" variant=\"solid\">\n          Add contact\n        </Button>\n      </Form>\n      {/* <Formik\n        initialValues={initialValues}\n        onSubmit={handleAddContact}\n        validationSchema={schema}\n      >\n        <Flex direction=\"column\" width=\"400px\" gap=\"15px\">\n          <Label>\n            Name\n            <Field\n              as={Input}\n              variant=\"outline\"\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n            <ErrorMessage name=\"name\" />\n          </Label>\n          <Label>\n            Number\n            <Field\n              as={Input}\n              variant=\"outline\"\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Number number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n            <ErrorMessage name=\"number\" />\n          </Label>\n          <Button type=\"submit\" colorScheme=\"teal\" variant=\"solid\">\n            Add contact\n          </Button>\n        </Flex>\n      </Formik> */}\n    </>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const ListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  list-style: inside;\n  padding-left: 16px;\n  :not(:last-child) {\n    margin-bottom: 8px;\n  }\n  :nth-of-type(2n) {\n    background-color: #f3f6f9;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { ListItem } from './ContactList.styled';\nimport { Button } from '@chakra-ui/react';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const handleDeleteContact = id => dispatch(deleteContact(id));\n\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ul>\n      {visibleContacts.map(({ id, name, number }) => {\n        return (\n          <ListItem key={id}>\n            {name}: {number}\n            <Button onClick={() => handleDeleteContact(id)} variant=\"solid\">\n              Delete\n            </Button>\n          </ListItem>\n        );\n      })}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      phone: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { Input } from '@chakra-ui/react';\nimport { Label, FormContainer } from 'components/CommonStyles/CommonStyles';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onFilter = e => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n\n  return (\n    <FormContainer>\n      <Label>\n        Find contacts by name\n        <Input\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={onFilter}\n          autoComplete=\"off\"\n          variant=\"outline\"\n        />\n      </Label>\n    </FormContainer>\n  );\n};\n\nFilter.propTypes = {\n  onFilter: PropTypes.func,\n  value: PropTypes.string,\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { selectLoading } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport Section from 'components/Section';\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <Section title={'Add new contact'}>\n        <ContactForm />\n      </Section>\n      <Section title={'Contacts'}>\n        <Filter />\n        <div>{isLoading && 'Request in progress...'}</div>\n        <ContactList />\n      </Section>\n    </>\n  );\n}\n"],"names":["FormContainer","styled","Form","Label","selectFilter","state","filter","selectLoading","contacts","loading","selectAllContacts","items","selectVisibleContacts","normalizedFilter","toLowerCase","contact","name","includes","Part","Title","title","children","dispatch","useDispatch","useSelector","handleAddContact","values","resetForm","number","isDuplicateName","find","isDuplicateNumber","alert","console","log","addContact","onSubmit","autoComplete","I","variant","type","pattern","required","colorScheme","ListItem","visibleContacts","map","id","onClick","deleteContact","handleDeleteContact","value","onChange","e","setFilter","currentTarget","Contacts","isLoading","useEffect","fetchContacts","Helmet"],"sourceRoot":""}