{"version":3,"file":"static/js/641.6733ca05.chunk.js","mappings":"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","sources":["components/Section/Section.styled.jsx","components/Section/Section.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Part = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n\n  :not(:last-child) {\n    margin-bottom: 32px;\n  }\n`;\n\nexport const Title = styled.h2`\n  font-weight: bold;\n`;\n","import PropTypes from 'prop-types';\nimport { Part, Title } from './Section.styled';\n\nconst Section = ({ title, children }) => (\n  <Part>\n    <Title>{title}</Title>\n    {children}\n  </Part>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n\nexport default Section;\n","import React, { useState } from 'react';\nimport { addContact } from 'redux/contacts/operations';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport { Input, Button } from '@chakra-ui/react';\nimport { Form, Label } from '../CommonStyles/CommonStyles';\nimport { toast } from 'react-toastify';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectAllContacts);\n\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        return setName(value);\n      case 'number':\n        return setNumber(value);\n      default:\n        return;\n    }\n  };\n\n  const handleAddContact = e => {\n    e.preventDefault();\n    const isDuplicateName = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    const isDuplicateNumber = contacts.find(\n      contact => contact.number.toLowerCase() === number.toLowerCase()\n    );\n\n    if (isDuplicateName) {\n      console.log('Name is already in contacts');\n      return toast.info(`${name} is already in contacts.`);\n    }\n\n    if (isDuplicateNumber) {\n      return toast.info(`${number} is already in contacts.`);\n    }\n\n    dispatch(addContact({ name, number }));\n    resetForm();\n  };\n\n  return (\n    <Form onSubmit={handleAddContact} autoComplete=\"off\">\n      <Label>\n        Name\n        <Input\n          onChange={handleChange}\n          variant=\"outline\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n        />\n      </Label>\n      <Label>\n        Number\n        <Input\n          onChange={handleChange}\n          variant=\"outline\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Number number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n        />\n      </Label>\n      <Button type=\"submit\" colorScheme=\"teal\" variant=\"solid\">\n        Add contact\n      </Button>\n    </Form>\n  );\n};\n\nexport default ContactForm;\n","import styled from '@emotion/styled';\n\nexport const ListItem = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  list-style: inside;\n  padding-left: 16px;\n  :not(:last-child) {\n    margin-bottom: 8px;\n  }\n  :nth-of-type(2n) {\n    background-color: #f3f6f9;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { ListItem } from './ContactList.styled';\nimport { Button } from '@chakra-ui/react';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const handleDeleteContact = id => dispatch(deleteContact(id));\n\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <ul>\n      {visibleContacts.map(({ id, name, number }) => {\n        return (\n          <ListItem key={id}>\n            {name}: {number}\n            <Button onClick={() => handleDeleteContact(id)} variant=\"solid\">\n              Delete\n            </Button>\n          </ListItem>\n        );\n      })}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      phone: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/filter/selectors';\nimport { Input } from '@chakra-ui/react';\nimport { Label, FormContainer } from 'components/CommonStyles/CommonStyles';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onFilter = e => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n\n  return (\n    <FormContainer>\n      <Label>\n        Find contacts by name\n        <Input\n          type=\"text\"\n          name=\"filter\"\n          value={filter}\n          onChange={onFilter}\n          autoComplete=\"off\"\n          variant=\"outline\"\n        />\n      </Label>\n    </FormContainer>\n  );\n};\n\nFilter.propTypes = {\n  onFilter: PropTypes.func,\n  value: PropTypes.string,\n};\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport { useDispatch} from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport Section from 'components/Section';\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <Section title={'Add new contact'}>\n        <ContactForm />\n      </Section>\n      <Section title={'Contacts'}>\n        <Filter />\n        <ContactList />\n      </Section>\n    </>\n  );\n}\n"],"names":["Part","styled","Title","title","children","useState","name","setName","number","setNumber","dispatch","useDispatch","contacts","useSelector","selectAllContacts","handleChange","e","target","value","onSubmit","preventDefault","isDuplicateName","find","contact","toLowerCase","isDuplicateNumber","console","log","toast","addContact","autoComplete","I","onChange","variant","type","pattern","required","colorScheme","ListItem","visibleContacts","selectVisibleContacts","map","id","onClick","deleteContact","handleDeleteContact","filter","selectFilter","setFilter","currentTarget","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}